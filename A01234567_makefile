# makefile for hello world
# coded by Carol Hazlewood
# September 9, 2008
# modified by Preston Maness
# 7 June 2012

# I can't agree with manually editing makefiles when the autotools
# do a far superior job of it. And of course you don't want to pull
# a Bumblebee. Deleting /usr will NOT speed up your computer...

# ===========================================================

#letting make work for us...

CXX=g++
CXXFLAGS=-c -g -Wall -O3
LDFLAGS=
SOURCES=A01234567_hello.cpp
OBJECTS=$(SOURCES:.cpp=.o)
EXECUTABLE=A01234567_hello

# ===========================================================

# The typical case. Preprocessing and compiling, then assembling
# and linking to make an executable.

output: $(EXECUTABLE)
	./$(EXECUTABLE)

$(EXECUTABLE): $(OBJECTS)
	$(CXX) $(LDFLAGS) $(OBJECTS) -o $@

.cpp.o:
	$(CXX) $(CXXFLAGS) $< -o $@

# ===========================================================

# the following rules produce intermediate files

# ===========================================================

# preprocessed produces source file with include statements expanded
# and redirects the output to file A01234567_preprocessed

A01234567_preprocessed: $(SOURCES)
	$(CXX) -E $(SOURCES) > A01234567_preprocessed

# ===========================================================

# compiled produces assembly language file A01234567_hello.s

A01234567_compiled: $(SOURCES)
	$(CXX) -S $(SOURCES)

# ===========================================================

# assembled produces object language file A01234567_hello.o
# and hexdump's it to a file A01234567_o_dump

A01234567_assembled: $(SOURCES)
	$(CXX) $(CXXFLAGS) $(SOURCES) -o $(OBJECTS) && hexdump $(OBJECTS) > A01234567_o_dump 

# ===========================================================

# linked produces executable language file A01234567_hello
# and hexdump's it to a file A01234567_x_dump

A01234567_linked: $(OBJECTS)
	$(CXX) $(LDFLAGS) $(OBJECTS) -o $(EXECUTABLE) && hexdump $(EXECUTABLE) > A01234567_x_dump 

# ===========================================================

clean:
	rm *.o
	rm *.s
	rm A01234567_hello
	rm *dump*
	rm *preproc*
	
# Sidenote: I  think Gregory has got the "compiled" and "assembled"
# target notes reversed. What he's calling "compiled" isn't actually
# producing object code, it's just spitting out assembly. And what
# he's calling "assembled" is actually getting compiled object code,
# not just assembling. Meh.

# Nah. It's right.